 //LOAD VARIABLESimport mx.controls.TextArea;// set up loader, an instance of MovieClipLoader to load thumbnails intovar loader : MovieClipLoader = new MovieClipLoader ();// use the main timeline to listen to and respond to loader's broadcast eventsloader.addListener (this);var loadListener : Object = new Object ();loader.addListener (loadListener);//find out size of player presentation areavar playerH : Number = _parent.presentSizeH;var playerW : Number = _parent.presentSizeW;//set var sizes for thumb area and main pic areavar thumbAreaH : Number = playerH *.2;var thumbAreaW : Number = playerW;var backColor : String = "0x000000";//playerMain_mc.root_xmlnode.attributes.footerColor;if (backColor == undefined){	backColor = "0x000000";}//Keep track of whether picture is showingvar isPictShowing : Boolean = false;var image_mcl : MovieClipLoader = new MovieClipLoader ();//used in openPic functionvar mclListener : Object = new Object ();image_mcl.addListener (mclListener);//----------------------LOAD XML DATA INTO VARIABLES------------------------------------------var image1text_xml : XMLNode = matchSiblingNode (_parent.currentPage_xmlnode.firstChild, "image1text");var image2text_xml : XMLNode = matchSiblingNode (_parent.currentPage_xmlnode.firstChild, "image2text");var image3text_xml : XMLNode = matchSiblingNode (_parent.currentPage_xmlnode.firstChild, "image3text");var image4text_xml : XMLNode = matchSiblingNode (_parent.currentPage_xmlnode.firstChild, "image4text");var image5text_xml : XMLNode = matchSiblingNode (_parent.currentPage_xmlnode.firstChild, "image5text");var instruction_xml : XMLNode = matchSiblingNode (_parent.currentPage_xmlnode.firstChild, "instructionText");var instructionText : String = "<p class = 'h1'>" + _parent.currentPage_xmlnode.attributes.title + "</p><br><p class = 'note'>" + instruction_xml.firstChild.nodeValue + "</p>";var titleText : String = _parent.currentPage_xmlnode.attributes.title;var caption1 : String = _parent.currentPage_xmlnode.attributes.image1caption;var caption2 : String = _parent.currentPage_xmlnode.attributes.image2caption;var caption3 : String = _parent.currentPage_xmlnode.attributes.image3caption;var caption4 : String = _parent.currentPage_xmlnode.attributes.image4caption;var caption5 : String = _parent.currentPage_xmlnode.attributes.image5caption;var imagePath1 : String = _parent.currentPage_xmlnode.attributes.image1;var imagePath2 : String = _parent.currentPage_xmlnode.attributes.image2;var imagePath3 : String = _parent.currentPage_xmlnode.attributes.image3;var imagePath4 : String = _parent.currentPage_xmlnode.attributes.image4;var imagePath5 : String = _parent.currentPage_xmlnode.attributes.image5;var image1text : String = image1text_xml.firstChild.nodeValuevar image2text : String = image2text_xml.firstChild.nodeValue;var image3text : String = image3text_xml.firstChild.nodeValue;var image4text : String = image4text_xml.firstChild.nodeValue;var image5text : String = image5text_xml.firstChild.nodeValue;// ------------------------------- END - LOAD XML DATA INTO VARIABLES ----------------------------------------// -----------more vars ------------var newSize:Number;var nPics : Number = 0;//number of total picturesfor (var i : Number = 1; i < 6; i ++){	if (this ["imagePath" + i] != undefined)	{		nPics ++	}}//trace(nPics)var myPicNum : String = "";//which picture is currently activevar borderSize : String = _parent.currentPage_xmlnode.attributes.borderSize;switch (borderSize){	//make image borders size based on XML	case "thin" :	var margin : Number = 2;	break;	case "medium" :	var margin : Number = 5;	break;	case "thick" :	var margin : Number = 10;	break;	default :	var margin : Number = 5;}var descriptionSize:String = playerMain_mc.currentPage_xmlnode.attributes.descriptionSize;var descriptionHeight:Number = 0;var thumbW : Number = (playerW - (margin * (6))) / 5 //set dynamic width of thumbnailsvar gutter : Number = thumbAreaW / 2 - ((nPics - 2) * margin) - (thumbW * nPics / 2) //to center images regardless of how many there arevar hideMeText : String = instructionBox_mc.hideme_txt.text;instructionBox_mc.hideme_txt.text = ""//trace(gutter)// thumbnail rollover handler//------------------- THUMBNAIL EVENT HANDLERS --------------------function grow (){	newSize = this._width * 1.2;	trace(this)	this.onEnterFrame = function ()	{		this.swapDepths(this._parent.getNextHighestDepth());		if (this._width < newSize/*thumbW * 1.2*/)		{			this._x -= this._width *.025;			this._y -= this._height *.025;			this._width *= 1.05;			this._height *= 1.05;		} else delete this.onEnterFrame;	};	//place the caption in the instruction box when they mouse over	var myName : String = this._name;	myPicNum = myName.substr (2);	//trace(myPicNum)	switch (myPicNum)	{		case "0" :		path = imagePath1;		break;		case "1" :		path = imagePath2;		break;		case "2" :		path = imagePath3;		break;		case "3" :		path = imagePath4;		break;		case "4" :		path = imagePath5;		break;		default :		trace ("not any of the five images")	}		instructionBox_mc._visible = true;	instructionBox_mc.instructions.htmlText = "<p class = 'note'><b>" + _parent.presentation ["caption" + (Number (myPicNum) + 1)] + "</b><br><br><font size ='10'>(Click the image to enlarge and learn more.)</font></p>";	if (pic_mc != undefined)	{		//show grey screen if big picture has been shown		if (screen_mc == undefined)		{			createEmptyMovieClip ("screen_mc", getNextHighestDepth ());			screen_mc.beginFill (0xFFFFFF, 70);			//set background to white			screen_mc.moveTo (back_mc._x + margin,pic_mc._y-margin);// (thumbs_mc._height*1.1) - margin);			screen_mc.lineTo (back_mc._width - margin, pic_mc._y-margin);//(thumbs_mc._height*1.1) - margin);			screen_mc.lineTo (back_mc._width - margin, playerH - margin);			screen_mc.lineTo (back_mc._x + margin, playerH - margin);			screen_mc.lineTo (back_mc._x + margin, pic_mc._y-margin);//(thumbs_mc._height*1.1) - margin);			screen_mc.endFill ();		}		screen_mc._visible = true;				screen_mc.setDepthAbove (lineUnderPic)				instructionBox_mc.setDepthAbove (screen_mc);			}}// thumbnail rollout handlerfunction shrink (){	this.onEnterFrame = function ()	{		if (this._width > thumbW || this._height > thumbAreaH - (margin * 2))		{			this._width /= 1.05;			this._height /= 1.05;			this._x += this._width *.025;			this._y += this._height *.025;		} else delete this.onEnterFrame;	};	instructionBox_mc.instructions.htmlText = instructionText;	if (isPictShowing)	{		instructionBox_mc._visible = false;		screen_mc._visible = false;	}}function hideStuff (){	screen_mc._visible = false;	instructionBox_mc._visible = false;}instructionBox_mc.onRelease = function (){	hideStuff ();}//thumbnail onRelease handlerfunction openPic (){	//trace("clicked");	//backWhite_mc._alpha = 100;	// backWhite_mc.setDepthAbove(back_mc);	hideStuff ();	removeMovieClip (lineUnderPic);	removeMovieClip (picBlackBorder);	//delete border so can dynamically draw next border	removeMovieClip (pic_mc);	//delete the bigpic movie clip so sizing of images depends on original	//picText.removeTextField();	trace (picText);	destroyObject ("picText")	//destroyObject(picText)	trace (picText);	instructionBox_mc.hideme_txt.text = hideMeText;	//load picture text	createEmptyMovieClip ("pic_mc", getNextHighestDepth () + 1);	// create empty clip to hold big pic	image_mcl.loadClip (path, pic_mc);	//make text box and populate for picture detail text	var tWidth : Number = playerW - (margin * 4);	var tHeight : Number = 50;	var tX : Number = margin * 2;	var tY : Number = playerH - 50 - margin;	//Determine height	if (playerH < 450)	{		var sizeFactor:Number = 25;	} else {		var sizeFactor:Number = 50;	}	switch(descriptionSize)	{		case "small":			var tHeight : Number = 50;			var tY : Number = playerH - 50 - margin;			break;		case "medium":			var tHeight : Number = 50 + sizeFactor;			var tY : Number = playerH - tHeight - margin;			break;		case "large":			var tHeight : Number = 50 + sizeFactor + sizeFactor;			var tY : Number = playerH - tHeight - margin;			break;		default:			var tHeight : Number = 50;			var tY : Number = playerH - 50 - margin;			break;	}	descriptionHeight = tHeight;	//createTextField("picText",getNextHighestDepth(),tX,tY,tWidth,tHeight);	createClassObject (TextArea, "picText", getNextHighestDepth () , 	{		editable : false, html : true, wordWrap : true	});	picText.setSize (tWidth, tHeight);	picText.move (tX, tY);	picText.setStyle ("borderStyle", "none");	/*picText.selectable = false;	picText.wordWrap = true;	picText.multiline = true;	picText.html = true;*/	//trace(picText);	var myText : String = _parent.presentation ["image" + (Number (myPicNum) + 1) + "text"];	if (myText != undefined)	{		myText = "<p class = 'pageText'><b>" + _parent.presentation ["caption" + (Number (myPicNum) + 1)] + ": </b>" + myText + "</p>";	} else 	{		myText = "";	}	var format = new TextField.StyleSheet ();	//apply template CSS formatting	format.load ("swfs/templateswfs/template_styles.css"); //Load the style sheet.	format.onLoad = function (ok)	{		if ( ! ok)		{			//Did the style load OK? If it doesn't load, no data loads.			//trace("Error loading CSS file.");					} else 		{			picText.styleSheet = format;			//Apply the style			picText.text = myText;		}	}	isPictShowing = true;}var nPicLoading : Number = 1;loadListener.onLoadProgress = function (target : MovieClip, bytesLoaded : Number, bytesTotal : Number){	var loadText = "<p class='note'><b>" + "Loading Image " + nPicLoading + " "	loadingInstance ++	for (var i : Number = 1; i <= nPicLoading; i ++)	{		loadText += "... "	}	loadText += "</b></p>"	pl_txt.htmlText = loadText;}loadListener.onLoadComplete = function (target){	nPicLoading ++	pl_txt.htmlText = "";	//trace(nPicLoading + "   " + nPics)	if (nPicLoading > nPics)	{		pl_txt.removeTextField ();	}}mclListener.onLoadInit = function (target_mc : MovieClip){	//what happens after big pic loads	//trace("loading of big pic is done");	target_mc._visible = false;	thisHeight = target_mc._height;	//loaded movieclip height	//trace("picheight="+thisHeight)	maximumHeight = playerH - thumbs_mc._height - (margin * 3) - descriptionHeight;	//the 50 is to accommodate the text field that goes under the image	//trace("maxH="+maximumHeight)	thisWidth = target_mc._width;	//loaded movieclip width	//trace("picwidth="+thisWidth)	maximumWidth = playerW - (margin * 2);	//trace("maxW="+maximumWidth)	ratio = thisHeight / thisWidth;	//calculation ratio to which resize takes place	//trace("ratio: "+ratio)	//if (thisWidth>maximumWidth) {	thisWidth = maximumWidth;	thisHeight = Math.round (thisWidth * ratio);	//}	//if (thisHeight>maximumHeight) {	thisHeight = maximumHeight;	thisWidth = Math.round (thisHeight / ratio);	//}	if(target_mc._height >= maximumHeight){		thisHeight = maximumHeight;		thisWidth = Math.round (thisHeight / ratio);		target_mc._width = thisWidth;		target_mc._height = thisHeight;	}	if(target_mc._width >= maximumWidth){		thisWidth = maximumWidth;		thisHeight = Math.round (thisWidth * ratio);		target_mc._width = thisWidth;		target_mc._height = thisHeight;	}	//target_mc._width = thisWidth;	//applying new width	//target_mc._height = thisHeight;	//applying new height	//trace("Thumbs height:" + thumbs_mc._height);	target_mc._y = thumbs_mc._height;	target_mc._x = (playerW - target_mc._width) / 2;	//trace("Pic_mc Y Pos: "+target_mc._y);	createEmptyMovieClip ("picBlackBorder", target_mc.getDepth () - 1);	picBlackBorder.beginFill (backColor, 100);	//set background to white	picBlackBorder.moveTo (target_mc._x - margin, target_mc._y - margin);	picBlackBorder.lineTo (target_mc._width + target_mc._x + margin, target_mc._y - margin);	picBlackBorder.lineTo (target_mc._width + target_mc._x + margin, thumbs_mc._height + target_mc._height + margin);	picBlackBorder.lineTo (target_mc._x - margin, thumbs_mc._height + target_mc._height + margin);	//picBlackBorder.lineTo (target_mc._x - margin, target_mc._y - margin);	picBlackBorder.endFill ();	createEmptyMovieClip ("lineUnderPic", getNextHighestDepth ());	lineUnderPic.beginFill (backColor, 100);	//set background to white	lineUnderPic.moveTo (margin, thumbs_mc._height + maximumHeight);//target_mc._height);	lineUnderPic.lineTo (playerW - margin, thumbs_mc._height + maximumHeight);//target_mc._height);	lineUnderPic.lineTo (playerW - margin, thumbs_mc._height + /*target_mc._height*/maximumHeight + margin);	lineUnderPic.lineTo (margin, thumbs_mc._height + /*target_mc._height*/maximumHeight + margin);	lineUnderPic.lineTo (margin, thumbs_mc._height + maximumHeight);//target_mc._height);	lineUnderPic.endFill ();	target_mc._visible = true;	lineUnderPic._visible = true;	picBlackBorder._visible = true;};//------------------------ END - THUMBNAIL EVENT HANDLERS -----------------------function setupHandlers (){	//set up event handler calls for each thumbnail movie clip	//pct_txt.removeTextField();		// don't need loading indicator any more	for (var i : Number = 0; i < nPics; i ++)	{		thumbs_mc ["mc" + i].onRollOver = grow;		thumbs_mc ["mc" + i].onRollOut = shrink;		thumbs_mc ["mc" + i].onRelease = openPic;	}}function onLoadInit (_mc : MovieClip){	// this gets done when the jpg is completely loaded:	var thumbH : Number = thumbAreaH - (margin * 2);	//set thumbnail height dynamically based on player area	_mc._width = thumbW;	_mc._height = thumbH;	_mc._xscale = _mc._yscale;	if(_mc._width >= thumbW){		_mc._width = thumbW;		_mc._height = thumbH;		_mc._yscale = _mc._xscale;	}	if(_mc._height >= thumbH){		_mc._width = thumbW;		_mc._height = thumbH;		_mc._xscale = _mc._yscale;	}	// give the movieclip a property to remind it who it is	// (used by openPic to know which big picture to open)	_mc.i = ipic;	// add picture size to totalloaded variable	totalloaded += loader.getProgress (_mc).bytesTotal;	// now load the next one (if there are more) or set up handlers if done	ipic ++;	if (ipic == nPics)	{		//start with text field instructions		//trace(instructionBox_mc._width)		instructionBox_mc.setDepthAbove (backWhite_mc);		var spaceForBox : Number = playerH - (thumbs_mc._height + margin * 2) - (50 + (margin * 2));		instructionBox_mc._y = (spaceForBox / 2) - (instructionBox_mc._height / 2) + thumbs_mc._height + margin * 2;		instructionBox_mc._x = (playerW - instructionBox_mc._width) / 2		// instructionBox_mc._height = playerH - thumbs_mc._height - (margin * 24);		//instructionBox_mc._width = playerW - (margin * 32);		//trace(instructionBox_mc._width)		var instructionFieldW : Number = 260;		//playerW / 3 * 2;		var instructionFieldH : Number = 205;		//(playerH - thumbs_mc._height) /3 * 2;		var instructionFieldX : Number = 20;		//(playerW - instructionFieldW)/2;		var instructionFieldY : Number = 10;		//(playerH - thumbs_mc._height) / 3;		var format = new TextField.StyleSheet ();		//apply template CSS formatting		instructionBox_mc.createTextField ("instructions", 10, instructionFieldX, instructionFieldY, instructionFieldW, instructionFieldH)		instructionBox_mc.instructions.multiline = true;		instructionBox_mc.instructions.html = true;		instructionBox_mc.instructions.wordWrap = true;		format.load ("swfs/templateswfs/template_styles.css"); //Load the style sheet.		format.onLoad = function (ok)		{			if ( ! ok)			{				//Did the style load OK? If it doesn't load, no data loads.				trace ("Error loading CSS file.");			} else 			{				instructionBox_mc.instructions.styleSheet = format;				//Apply the style				instructionBox_mc.instructions.htmlText = instructionText;			}		}		setupHandlers ();	} else 	{		switch (ipic)		{			case 0 :			path = imagePath1;			break;			case 1 :			path = imagePath2;			break;			case 2 :			path = imagePath3;			break;			case 3 :			path = imagePath4;			break;			case 4 :			path = imagePath5;			break;			default :			trace ("not any of the five images")		}		loader.loadClip (path, thumbs_mc ["mc" + ipic]);	}};function init (){	//---------------- CREATE BACKGROUND ----------------------------------	//create background to the right size to fit presentation area	//create (and draw) holder for thumbnails	this.createEmptyMovieClip ("thumbs_mc", 100);	thumbs_mc.beginFill (backColor, 100);	thumbs_mc.moveTo (0, 0);	thumbs_mc.lineTo (thumbAreaW, 0);	thumbs_mc.lineTo (thumbAreaW, thumbAreaH);	//size thumbnail area to 20% of total area	thumbs_mc.lineTo (0, thumbAreaH);	thumbs_mc.lineTo (0, 0);	thumbs_mc.endFill ();	thumbs_mc._x = 0;	thumbs_mc._y = 0;	// create (and draw) holder for main pic	this.createEmptyMovieClip ("back_mc", 1);	back_mc.beginFill (backColor, 100);	//set background to white	back_mc.moveTo (0, 0);	back_mc.lineTo (thumbs_mc._width, 0);	back_mc.lineTo (thumbs_mc._width, playerH);	back_mc.lineTo (0, playerH);	back_mc.lineTo (0, 0);	back_mc.endFill ();	//  create internal white space for large pic	this.createEmptyMovieClip ("backWhite_mc", 2);	backWhite_mc.beginFill (0xFFFFFF, 100);	//set background to white	backWhite_mc.moveTo (back_mc._x + margin, thumbs_mc._height);	backWhite_mc.lineTo (back_mc._width - margin, thumbs_mc._height);	backWhite_mc.lineTo (back_mc._width - margin, playerH - margin);	backWhite_mc.lineTo (back_mc._x + margin, playerH - margin);	backWhite_mc.lineTo (back_mc._x + margin, thumbs_mc._height);	backWhite_mc.endFill ();	//----------------------- END -  CREATE BACKGROUND --------------------------------	//----------------------- CREATE EMPTY MOVIE CLIPS FOR THUMBNAILS AND BIG PICS TO GO INTO ------------------	for (var i : Number = 0; i < nPics; i ++)	{		//thumb clips		var mc : MovieClip = thumbs_mc.createEmptyMovieClip ("mc" + i, i + 1);		mc._x = margin + i * (margin + thumbW) + gutter;		mc._y = margin;	}	for (var i : Number = 0; i < nPics; i ++)	{		//big pic clips		var mc : MovieClip = backWhite_mc.createEmptyMovieClip ("mc" + i, i + 1);		mc._x = margin + i * (margin + thumbW);		mc._y = margin;	}	//----------------------- END - CREATE EMPTY MOVIE CLIPS FOR THUMBNAILS TO GO INTO ------------------	//show preloader	var plW : Number = playerW / 3 * 2;	var plH : Number = (playerH - thumbs_mc._height) / 3 * 2;	var plX : Number = playerW / 3;	var plY : Number = (playerH - thumbs_mc._height) / 3;	var format = new TextField.StyleSheet ();	//apply template CSS formatting	createTextField ("pl_txt", getNextHighestDepth () , plX, plY, plW, plH)	pl_txt.html = true;	pl_txt.wordWrap = true;	pl_txt.selectable = false;	format.load ("swfs/templateswfs/template_styles.css"); //Load the style sheet.	format.onLoad = function (ok)	{		if ( ! ok)		{			//Did the style load OK? If it doesn't load, no data loads.			trace ("Error loading CSS file.");		} else 		{			pl_txt.styleSheet = format;			//Apply the style			pl_txt.htmlText = "Loading Image: 1 ...";			//populated with 'Loading Image: n' in the onLoadInit();					}	}	// set the pointer to the first jpg in the array picnames	ipic = 0;	// start loading jpgs	loader.loadClip (imagePath1, thumbs_mc ["mc" + ipic]);} //end init()init ();